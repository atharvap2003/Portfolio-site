#include <iostream>
#define SIZE 5 /* Size of Circular Queue */
using namespace std;
class Queue
{
private:
    int arr[SIZE], front, rear;

public:
    Queue()
    {
        front = rear = -1;
        for (int i = 0; i < SIZE; i++)
            arr[i] = -1;
    }
    // Check if the queue is full
    bool isFull()
    {
        if (front == 0 && rear == SIZE - 1)
        {
            return true;
        }
        if (front == rear + 1)
        {
            return true;
        }
        return false;
    }
    // Check if the queue is empty
    bool isEmpty()
    {
        if (front == -1)
            return true;
        else
            return false;
    }
    // Adding an element
    void enqueue()
    {
        int element;
        if (isFull())
        {
            cout << "Queue is full";
        }
        else if (front == -1)
        {
            front = rear = 0;
        }
        else if (rear == SIZE - 1 && front != 0)
        {
            // rear is at position
            rear = 0;
        }
        else
        {
            rear = (rear + 1) % SIZE;
        }
        cout << "\nEnter the element to be inserted: ";
        cin >> element;
        arr[rear] = element;
        cout << "Inserted " << element << endl;
    }
    // Removing an element
    void dequeue()
    {
        int element;
        if (isEmpty())
        {
            cout << "Queue is empty" << endl;
        }

        element = arr[front];
        arr[front] = -1;
        if (front == rear)
        {
            front = rear = -1;
        }
        // Q has only one element,
        // so we reset the queue after deleting it.
        else if (front == SIZE - 1)
        {
            front = 0; // to maintain cyclic nature
        }
        else
        {
            front = (front + 1) % SIZE;
        }
        cout << "\nElement " << element << " is deleted";
    }
    void display()
    {
        // Function to display status of Circular Queue
        int i;
        if (isEmpty())
        {
            cout << "Empty Queue" << endl;
        }
        else
        {
            cout << "\nElements in Circular queue are : ";
            for (i = 0; i != SIZE - 1; i = (i + 1) % SIZE)
                cout << arr[i] << " ";
            cout << arr[i];
            cout << "\nFront is at index: " << front << endl;
            cout << "Rear is at index:  " << rear << endl;
        }
    }
};
int main()
{
    Queue q;
    q.enqueue();
    q.enqueue();
    q.enqueue();

    q.display();

    q.enqueue();
    q.enqueue();

    q.display();

    q.dequeue();

    q.enqueue();
    q.display();
    return 0;
}